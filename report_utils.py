# report_utils.py
"""
Utility functions for exporting student summary reports (TXT and PDF).
"""

from collections import Counter
import logging

logger = logging.getLogger(__name__)

def export_summary_report_txt(records, filename="summary_report.txt"):
    try:
        with open(filename, "w") as f:
            f.write("Summary Report\n==============\n")
            f.write(f"Total students: {len(records)}\n")
            f.write("Grade distribution:\n")
            grade_counts = Counter([r['grade'] for r in records])
            for grade, count in grade_counts.items():
                f.write(f"{grade}: {count}\n")
            f.write("\nStudent Grades:\n")
            # Sort by name (A-Z), then grade (A-F)
            sorted_records = sorted(records, key=lambda r: (str(r['full_name']).lower(), r['grade']))
            for r in sorted_records:
                f.write(f"{r['full_name']} (index: {r['index_number']}) - {r['grade']}\n")
        logger.info(f"Summary report exported to {filename}.")
        return True
    except Exception as e:
        logger.error(f"Failed to export summary report: {e}")
        return False

def export_summary_report_pdf(records, filename="summary_report.pdf"):
    try:
        from fpdf import FPDF
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", 'B', 22)
        pdf.set_text_color(0, 102, 204)
        pdf.cell(0, 15, "Student Results Summary Report", ln=1, align="C")
        pdf.set_font("Arial", '', 10)
        pdf.set_text_color(120, 120, 120)
        pdf.cell(0, 8, "Generated by Student Result Management CLI Tool", ln=1, align="C")
        scores = [r['score'] for r in records]
        avg_score = round(sum(scores)/len(scores), 2) if scores else 0
        max_score = max(scores) if scores else 0
        min_score = min(scores) if scores else 0
        pdf.set_font("Arial", '', 13)
        pdf.set_text_color(0, 0, 0)
        pdf.cell(0, 10, f"Total students: {len(records)}", ln=1, align="L")
        pdf.cell(0, 8, f"Average score: {avg_score}", ln=1, align="L")
        pdf.cell(0, 8, f"Highest score: {max_score}", ln=1, align="L")
        pdf.cell(0, 8, f"Lowest score: {min_score}", ln=1, align="L")
        pdf.set_font("Arial", 'B', 15)
        pdf.set_text_color(34, 139, 34)
        pdf.cell(0, 12, "Grade Distribution:", ln=1, align="L")
        grade_counts = Counter([r['grade'] for r in records])
        grade_colors = {'A': (0, 128, 0), 'B': (0, 0, 255), 'C': (255, 140, 0), 'D': (255, 0, 0), 'F': (128, 0, 0)}
        pdf.set_font("Arial", '', 13)
        for grade, count in sorted(grade_counts.items(), key=lambda x: x[0]):
            color = grade_colors.get(grade, (0, 0, 0))
            pdf.set_text_color(*color)
            pdf.cell(0, 9, f"{grade}: {count}", ln=1, align="L")
        pdf.set_font("Arial", 'B', 15)
        pdf.set_text_color(0, 102, 204)
        pdf.cell(0, 12, "Student Grades (sorted by name, then grade):", ln=1, align="L")
        pdf.set_font("Arial", 'B', 12)
        pdf.set_fill_color(220, 220, 220)
        pdf.set_text_color(0, 0, 0)
        pdf.cell(50, 8, "Name", border=1, align="L", fill=True)
        pdf.cell(30, 8, "Index", border=1, align="C", fill=True)
        pdf.cell(40, 8, "Course", border=1, align="L", fill=True)
        pdf.cell(20, 8, "Score", border=1, align="C", fill=True)
        pdf.cell(15, 8, "Grade", border=1, align="C", fill=True)
        pdf.ln()
        # Sort by name (A-Z), then grade (A-F)
        sorted_students = sorted(records, key=lambda r: (str(r['full_name']).lower(), r['grade']))
        row_colors = [(255,255,255), (245,245,245)]
        for i, r in enumerate(sorted_students):
            grade = r['grade']
            color = grade_colors.get(grade, (0, 0, 0))
            fill_color = row_colors[i%2]
            pdf.set_fill_color(*fill_color)
            pdf.set_text_color(*color)
            pdf.set_font("Arial", '', 12)
            pdf.cell(50, 8, str(r['full_name']), border=1, align="L", fill=True)
            pdf.cell(30, 8, str(r['index_number']), border=1, align="C", fill=True)
            pdf.cell(40, 8, str(r['course']), border=1, align="L", fill=True)
            pdf.cell(20, 8, str(r['score']), border=1, align="C", fill=True)
            pdf.cell(15, 8, grade, border=1, align="C", fill=True)
            pdf.ln()
        pdf.output(filename)
        logger.info(f"Summary report exported to {filename}.")
        return True
    except Exception as e:
        logger.error(f"Failed to export PDF summary report: {e}")
        return False
