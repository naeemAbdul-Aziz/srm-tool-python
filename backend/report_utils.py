from collections import Counter
from datetime import datetime
import os
import logging
from session import session_manager
from db import connect_to_db, fetch_student_by_index_number, fetch_all_records # For fetching data for reports
from grade_util import calculate_grade, calculate_gpa # For GPA calculation in reports
from fpdf import FPDF # For PDF generation

logger = logging.getLogger(__name__)

def get_report_header_info():
    """get report header information based on current session"""
    current_user = session_manager.get_current_user()
    if current_user:
        username = current_user['username']
        role = current_user['role']
        full_name = current_user.get('user_data', {}).get('full_name', username)
        return {
            'generated_by': f"{full_name} ({role})",
            'username': username,
            'role': role,
            'generation_time': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'session_duration': f"{session_manager.get_session_duration():.1f} minutes"
        }
    else:
        return {
            'generated_by': "System User",
            'username': "unknown",
            'role': "unknown", 
            'generation_time': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'session_duration': "N/A"
        }

logger.info("Processing records for display...")

# Modularized data processing logic
def process_student_profile(record):
    """Process individual student profile."""
    return {
        'index_number': record.get('index_number', 'unknown'),
        'name': record.get('full_name', 'N/A'),
        'program': record.get('program', 'N/A'),
        'year_of_study': record.get('year_of_study', 'N/A'),
        'dob': record.get('dob', 'N/A'),
        'gender': record.get('gender', 'N/A'),
        'contact_email': record.get('contact_email', 'N/A')
    }

def process_student_grades(record):
    """Process individual student grades."""
    return {
        'course_code': record.get('course_code', 'N/A'),
        'score': record.get('score', 'N/A')
    }

def process_records_for_display(records):
    """Process and organize records for better display."""
    if not records:
        logger.warning("No records provided for processing.")
        return []

    student_records = {}
    for record in records:
        try:
            index_number = record.get('index_number', 'unknown')
            if index_number not in student_records:
                student_records[index_number] = {
                    'profile': process_student_profile(record),
                    'grades': []
                }

            if 'course_code' in record and record.get('score') is not None:
                student_records[index_number]['grades'].append(process_student_grades(record))
        except Exception as e:
            logger.error(f"Error processing record for index_number {record.get('index_number', 'unknown')}: {e}")

    logger.info(f"Processed {len(student_records)} student records.")
    return student_records

def export_summary_report_txt(records: list, filename="summary_report.txt"):
    """
    Exports a detailed summary report of all student records to a text file in tabular format.
    """
    try:
        header_info = get_report_header_info()
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(f"{'='*80}\n")
            f.write(f"{'STUDENT RESULTS SUMMARY REPORT':^80}\n")
            f.write(f"{'='*80}\n\n")
            f.write(f"Generated By: {header_info['generated_by']}\n")
            f.write(f"Generation Time: {header_info['generation_time']}\n")
            f.write(f"Session Duration: {header_info['session_duration']}\n")
            f.write(f"{'='*80}\n\n")

            if not records:
                f.write("No student records available.\n")
                logger.info(f"Generated empty summary report: {filename}")
                return True

            # Summary statistics
            total_students = len(records)
            average_score = sum(
                grade['score'] for student in records for grade in student['grades'] if isinstance(student['grades'], list)
            ) / total_students
            highest_score = max(
                grade['score'] for student in records for grade in student['grades'] if isinstance(student['grades'], list)
            )
            lowest_score = min(
                grade['score'] for student in records for grade in student['grades'] if isinstance(student['grades'], list)
            )

            f.write(f"Total Students: {total_students}\n")
            f.write(f"Average Score: {average_score:.2f}\n")
            f.write(f"Highest Score: {highest_score}\n")
            f.write(f"Lowest Score: {lowest_score}\n")
            f.write(f"{'='*80}\n\n")

            # Grade distribution
            grade_distribution = {"A": 0, "B": 0, "C": 0, "D": 0, "F": 0}
            for student in records:
                for grade in student['grades']:
                    grade_value = grade['grade'] if isinstance(student['grades'], list) else "F"
                    grade_distribution[grade_value] += 1

            f.write("Grade Distribution:\n")
            for grade, count in grade_distribution.items():
                f.write(f"{grade}: {count}\n")
            f.write(f"{'='*80}\n\n")

            # Tabular header
            f.write(f"{'Name':<25}{'Index':<15}{'Course':<15}{'Score':<10}{'Grade':<10}\n")
            f.write(f"{'-'*80}\n")

            for student_data in sorted(records, key=lambda x: (x['grades'][0]['grade'] if isinstance(x['grades'], list) else "F", x['profile']['full_name'])):
                profile = student_data['profile']
                for grade in student_data['grades']:
                    if isinstance(student_data['grades'], list):
                        f.write(f"{profile['full_name']:<25}{profile['index_number']:<15}{grade['course_code']:<15}{grade['score']:<10}{grade['grade']:<10}\n")

            logger.info(f"Summary report exported to {filename}")
            return True
    except Exception as e:
        logger.error(f"Error exporting summary report to TXT: {e}")
        return False

class PDFReport(FPDF):
    def __init__(self, header_info, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.header_info = header_info
        self.set_auto_page_break(auto=True, margin=15) # Set auto page break

    def header(self):
        self.set_font('Arial', 'B', 15)
        self.cell(0, 10, 'Student Academic Report', 0, 1, 'C')
        self.set_font('Arial', '', 10)
        self.cell(0, 5, f"Generated By: {self.header_info['generated_by']}", 0, 1, 'C')
        self.cell(0, 5, f"Generation Time: {self.header_info['generation_time']}", 0, 1, 'C')
        self.cell(0, 5, f"Session Duration: {self.header_info['session_duration']}", 0, 1, 'C')
        self.ln(10)

    def footer(self):
        self.set_y(-15)
        self.set_font('Arial', 'I', 8)
        self.cell(0, 10, f'Page {self.page_no()}/{{nb}}', 0, 0, 'C')

    def chapter_title(self, title):
        self.set_font('Arial', 'B', 12)
        self.cell(0, 10, title, 0, 1, 'L')
        self.ln(2)

    def chapter_body(self, body):
        self.set_font('Arial', '', 10)
        self.multi_cell(0, 6, body)
        self.ln()

def export_summary_report_pdf(records: list, filename="summary_report.pdf"):
    """
    Exports a detailed and professional summary report of all student records to a PDF file in tabular format.
    """
    try:
        header_info = get_report_header_info()
        pdf = PDFReport(header_info)
        pdf.alias_nb_pages()
        pdf.add_page()
        pdf.set_left_margin(20)
        pdf.set_right_margin(20)

        # Add a professional header
        pdf.set_font('Arial', 'B', 16)
        pdf.cell(0, 10, 'Student Results Summary Report', 0, 1, 'C')
        pdf.set_font('Arial', 'I', 10)
        pdf.cell(0, 10, f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", 0, 1, 'C')
        pdf.ln(10)

        if not records:
            pdf.set_font('Arial', '', 12)
            pdf.cell(0, 10, "No student records available.", 0, 1, 'C')
            logger.info(f"Generated empty summary report: {filename}")
            pdf.output(filename)
            return True

        # Group records by course
        courses = {}
        for student in records:
            for grade in student['grades']:
                course_code = grade['course_code']
                if course_code not in courses:
                    courses[course_code] = []
                courses[course_code].append({
                    'name': student['profile']['full_name'],
                    'index': student['profile']['index_number'],
                    'score': grade['score'],
                    'grade': grade['grade']
                })

        # Iterate through courses and add sections
        for course_code, students in courses.items():
            pdf.set_font('Arial', 'B', 14)
            pdf.cell(0, 10, f"Course: {course_code}", 0, 1, 'L')

            # Course statistics
            scores = [student['score'] for student in students]
            average_score = sum(scores) / len(scores)
            highest_score = max(scores)
            lowest_score = min(scores)

            pdf.set_font('Arial', '', 12)
            pdf.cell(0, 10, f"Average Score: {average_score:.2f}", 0, 1, 'L')
            pdf.cell(0, 10, f"Highest Score: {highest_score}", 0, 1, 'L')
            pdf.cell(0, 10, f"Lowest Score: {lowest_score}", 0, 1, 'L')
            pdf.ln(5)

            # Tabular header
            pdf.set_font('Arial', 'B', 12)
            pdf.cell(50, 10, "Name", 1, 0, 'C')
            pdf.cell(30, 10, "Index", 1, 0, 'C')
            pdf.cell(20, 10, "Score", 1, 0, 'C')
            pdf.cell(20, 10, "Grade", 1, 1, 'C')

            # Add student data with color coding for grades
            pdf.set_font('Arial', '', 10)
            for student in students:
                grade_color = {
                    'A': (0, 128, 0),  # Green
                    'B': (0, 0, 255),  # Blue
                    'C': (255, 255, 0),  # Yellow
                    'D': (255, 165, 0),  # Orange
                    'F': (255, 0, 0)   # Red
                }.get(student['grade'], (0, 0, 0))  # Default to black

                pdf.set_text_color(*grade_color)
                pdf.cell(50, 10, student['name'], 1, 0, 'C')
                pdf.cell(30, 10, student['index'], 1, 0, 'C')
                pdf.cell(20, 10, str(student['score']), 1, 0, 'C')
                pdf.cell(20, 10, student['grade'], 1, 1, 'C')

            pdf.set_text_color(0, 0, 0)  # Reset to black
            pdf.ln(10)

        logger.info(f"Summary report exported to {filename}")
        pdf.output(filename)
        return True
    except Exception as e:
        logger.error(f"Error exporting summary report to PDF: {e}")
        return False

def export_personal_academic_report(student_index, format_type='pdf'):
    """
    Generates a personal academic report for a specific student.
    Can export to PDF or TXT.
    """
    logger.info(f"generating personal academic report for {student_index} in {format_type} format")
    try:
        conn = connect_to_db()
        if conn:
            student_data = fetch_student_by_index_number(conn, student_index)
            conn.close()

            if student_data and student_data.get('profile') and student_data.get('grades'):
                # process_records_for_display expects a list of flattened records
                # so we need to transform student_data back into that format for consistency
                records = []
                for grade in student_data['grades']:
                    record = {**student_data['profile'], **grade}
                    records.append(record)
                
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"personal_report_{student_index}_{timestamp}"
                
                if format_type.lower() == 'pdf':
                    return export_summary_report_pdf(records, filename + '.pdf')
                else:
                    return export_summary_report_txt(records, filename + '.txt')
            else:
                logger.warning(f"no data found for student {student_index}")
                return False
        else:
            logger.error("database connection failed for personal report")
            return False
    except Exception as e:
        logger.error(f"error generating personal report for {student_index}: {e}")
        return False

def export_admin_comprehensive_report(records, format_type='txt'):
    """export comprehensive administrative report"""
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"admin_comprehensive_report_{timestamp}"
        
        if format_type.lower() == 'pdf':
            return export_summary_report_pdf(records, filename + '.pdf')
        else:
            return export_summary_report_txt(records, filename + '.txt')
    except Exception as e:
        logger.error(f"error generating admin comprehensive report: {e}")
        return False

def fetch_all_records_with_admin_check(conn):
    """Fetch all records with admin validation."""
    current_user = session_manager.get_current_user()
    if not current_user or current_user['role'] != 'admin':
        logger.warning("Unauthorized access attempt to fetch all records.")
        return None

    return fetch_all_records(conn)