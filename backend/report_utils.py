from collections import Counter
from datetime import datetime
import os
import logging
from session import session_manager
from db import connect_to_db, fetch_student_by_index_number, fetch_all_records # For fetching data for reports
from grade_util import calculate_grade, calculate_gpa # For GPA calculation in reports
from fpdf import FPDF # For PDF generation

logger = logging.getLogger(__name__)

def get_report_header_info():
    """get report header information based on current session"""
    current_user = session_manager.get_current_user()
    if current_user:
        username = current_user['username']
        role = current_user['role']
        full_name = current_user.get('user_data', {}).get('full_name', username)
        return {
            'generated_by': f"{full_name} ({role})",
            'username': username,
            'role': role,
            'generation_time': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'session_duration': f"{session_manager.get_session_duration():.1f} minutes"
        }
    else:
        return {
            'generated_by': "System User",
            'username': "unknown",
            'role': "unknown", 
            'generation_time': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'session_duration': "N/A"
        }

def process_records_for_display(records):
    """process and organize records for better display"""
    if not records:
        return []
    
    student_records = {}
    for record in records:
        index_number = record.get('index_number', 'unknown')
        if index_number not in student_records:
            student_records[index_number] = {
                'profile': {
                    'index_number': index_number,
                    'name': record.get('full_name', 'N/A'), # Using full_name from db for consistency
                    'program': record.get('program', 'N/A'),
                    'year_of_study': record.get('year_of_study', 'N/A'),
                    'dob': record.get('dob', 'N/A'),
                    'gender': record.get('gender', 'N/A'),
                    'contact_email': record.get('contact_email', 'N/A')
                },
                'grades': []
            }
        
        # Only add grade info if it's a valid grade record
        if 'course_code' in record and record.get('score') is not None:
            student_records[index_number]['grades'].append({
                'course_code': record.get('course_code', 'N/A'),
                'course_title': record.get('course_title', 'N/A'),
                'credit_hours': record.get('credit_hours', 'N/A'),
                'score': record.get('score', 'N/A'),
                'grade': record.get('grade', 'N/A'),
                'grade_point': record.get('grade_point', 'N/A'),
                'semester_name': record.get('semester_name', 'N/A'),
                'academic_year': record.get('academic_year', 'N/A')
            })
    return list(student_records.values()) # Return as a list of student dictionaries

def export_summary_report_txt(records: list, filename="summary_report.txt"):
    """
    Exports a summary report of all student records to a text file.
    Assumes records are already processed via process_records_for_display.
    """
    try:
        header_info = get_report_header_info()
        with open(filename, 'w', encoding='utf-8') as f:
            f.write("="*50 + "\n")
            f.write("STUDENT ACADEMIC SUMMARY REPORT\n")
            f.write("="*50 + "\n\n")
            f.write(f"Generated By: {header_info['generated_by']}\n")
            f.write(f"Generation Time: {header_info['generation_time']}\n")
            f.write(f"Session Duration: {header_info['session_duration']}\n")
            f.write("="*50 + "\n\n")

            if not records:
                f.write("No student records available.\n")
                logger.info(f"Generated empty summary report: {filename}")
                return True

            for student_data in records:
                profile = student_data['profile']
                grades = student_data['grades']

                f.write(f"Student Name: {profile['full_name']} (Index: {profile['index_number']})\n")
                f.write(f"Program: {profile['program']}, Year: {profile['year_of_study']}\n")
                f.write(f"Contact: {profile['contact_email']}\n")
                f.write("-" * 40 + "\n")
                f.write("Courses & Grades:\n")
                if grades:
                    for grade in grades:
                        f.write(f"  - {grade['course_code']}: {grade['course_title']} (Credits: {grade['credit_hours']})\n")
                        f.write(f"    Score: {grade['score']}, Grade: {grade['grade']} (GP: {grade['grade_point']}) | Semester: {grade['semester_name']} ({grade['academic_year']})\n")
                    # Calculate and add GPA for each student
                    gpa = calculate_gpa(grades)
                    f.write(f"  Overall GPA: {gpa:.2f}\n")
                else:
                    f.write("  No grades on record.\n")
                f.write("\n")
            
            logger.info(f"Summary report exported to {filename}")
            return True
    except Exception as e:
        logger.error(f"Error exporting summary report to TXT: {e}")
        return False

class PDFReport(FPDF):
    def __init__(self, header_info, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.header_info = header_info
        self.set_auto_page_break(auto=True, margin=15) # Set auto page break

    def header(self):
        self.set_font('Arial', 'B', 15)
        self.cell(0, 10, 'Student Academic Report', 0, 1, 'C')
        self.set_font('Arial', '', 10)
        self.cell(0, 5, f"Generated By: {self.header_info['generated_by']}", 0, 1, 'C')
        self.cell(0, 5, f"Generation Time: {self.header_info['generation_time']}", 0, 1, 'C')
        self.cell(0, 5, f"Session Duration: {self.header_info['session_duration']}", 0, 1, 'C')
        self.ln(10)

    def footer(self):
        self.set_y(-15)
        self.set_font('Arial', 'I', 8)
        self.cell(0, 10, f'Page {self.page_no()}/{{nb}}', 0, 0, 'C')

    def chapter_title(self, title):
        self.set_font('Arial', 'B', 12)
        self.cell(0, 10, title, 0, 1, 'L')
        self.ln(2)

    def chapter_body(self, body):
        self.set_font('Arial', '', 10)
        self.multi_cell(0, 6, body)
        self.ln()

def export_summary_report_pdf(records: list, filename="summary_report.pdf"):
    """
    Exports a sleek and professional summary report of all student records to a PDF file.
    Assumes records are already processed via process_records_for_display.
    """
    try:
        header_info = get_report_header_info()
        pdf = PDFReport(header_info)
        pdf.alias_nb_pages()
        pdf.add_page()
        pdf.set_left_margin(20)
        pdf.set_right_margin(20)

        # Add a professional header
        pdf.set_font('Arial', 'B', 16)
        pdf.cell(0, 10, 'Student Academic Summary Report', 0, 1, 'C')
        pdf.set_font('Arial', 'I', 10)
        pdf.cell(0, 10, f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", 0, 1, 'C')
        pdf.ln(10)

        if not records:
            pdf.set_font('Arial', '', 12)
            pdf.cell(0, 10, "No student records available.", 0, 1, 'C')
            pdf.output(filename)
            logger.info(f"Generated empty summary report: {filename}")
            return True

        for student_data in records:
            profile = student_data['profile']
            grades = student_data['grades']

            # Add student profile section
            pdf.set_font('Arial', 'B', 12)
            pdf.cell(0, 10, f"Student: {profile['full_name']} (Index: {profile['index_number']})", 0, 1, 'L')
            pdf.set_font('Arial', '', 11)
            pdf.cell(0, 8, f"Program: {profile['program']}, Year: {profile['year_of_study']}", 0, 1, 'L')
            pdf.cell(0, 8, f"Contact Email: {profile['contact_email']}", 0, 1, 'L')
            pdf.ln(5)

            # Add grades section
            pdf.set_font('Arial', 'B', 11)
            pdf.cell(0, 8, 'Courses & Grades:', 0, 1, 'L')
            pdf.set_font('Arial', '', 10)

            if grades:
                for grade in grades:
                    pdf.cell(0, 6, f"  - {grade['course_code']}: {grade['course_title']} (Credits: {grade['credit_hours']})", 0, 1, 'L')
                    pdf.cell(0, 6, f"    Score: {grade['score']}, Grade: {grade['grade']} (GP: {grade['grade_point']}) | Semester: {grade['semester_name']} ({grade['academic_year']})", 0, 1, 'L')

                gpa = calculate_gpa(grades)
                pdf.ln(3)
                pdf.set_font('Arial', 'B', 11)
                pdf.cell(0, 8, f"Overall GPA: {gpa:.2f}", 0, 1, 'L')
            else:
                pdf.cell(0, 8, '  No grades on record.', 0, 1, 'L')

            pdf.ln(10) # Add space between students

        pdf.output(filename)
        logger.info(f"Summary report exported to {filename}")
        return True
    except Exception as e:
        logger.error(f"Error exporting summary report to PDF: {e}")
        return False

def export_personal_academic_report(student_index, format_type='pdf'):
    """
    Generates a personal academic report for a specific student.
    Can export to PDF or TXT.
    """
    logger.info(f"generating personal academic report for {student_index} in {format_type} format")
    try:
        conn = connect_to_db()
        if conn:
            student_data = fetch_student_by_index_number(conn, student_index)
            conn.close()

            if student_data and student_data.get('profile') and student_data.get('grades'):
                # process_records_for_display expects a list of flattened records
                # so we need to transform student_data back into that format for consistency
                records = []
                for grade in student_data['grades']:
                    record = {**student_data['profile'], **grade}
                    records.append(record)
                
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"personal_report_{student_index}_{timestamp}"
                
                if format_type.lower() == 'pdf':
                    return export_summary_report_pdf(records, filename + '.pdf')
                else:
                    return export_summary_report_txt(records, filename + '.txt')
            else:
                logger.warning(f"no data found for student {student_index}")
                return False
        else:
            logger.error("database connection failed for personal report")
            return False
    except Exception as e:
        logger.error(f"error generating personal report for {student_index}: {e}")
        return False

def export_admin_comprehensive_report(records, format_type='txt'):
    """export comprehensive administrative report"""
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"admin_comprehensive_report_{timestamp}"
        
        if format_type.lower() == 'pdf':
            return export_summary_report_pdf(records, filename + '.pdf')
        else:
            return export_summary_report_txt(records, filename + '.txt')
    except Exception as e:
        logger.error(f"error generating admin comprehensive report: {e}")
        return False